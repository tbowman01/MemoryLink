name: MemoryLink Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Unit Tests - Fast feedback
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install -e .
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --marker=unit \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=test-results/unit-tests.xml
          
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-py${{ matrix.python-version }}
        path: test-results/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-py${{ matrix.python-version }}

  # Integration Tests - Require services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: memorylink_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      chroma:
        image: chromadb/chroma:latest
        ports:
          - 8080:8000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install -e .
        
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done
        # Wait for ChromaDB
        until curl -f http://localhost:8080/api/v1/heartbeat; do sleep 1; done
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/memorylink_test
        CHROMA_URL: http://localhost:8080
      run: |
        pytest tests/integration/ \
          --marker=integration \
          --cov=src \
          --cov-report=xml \
          --junit-xml=test-results/integration-tests.xml
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install bandit[toml] safety
        
    - name: Run security tests
      run: |
        pytest tests/security/ \
          --marker=security \
          --junit-xml=test-results/security-tests.xml
          
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o security-scan.json
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
        
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          test-results/
          security-scan.json
          safety-report.json

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install -e .
        
    - name: Run performance tests
      run: |
        pytest tests/performance/ \
          --marker=performance \
          --benchmark-json=benchmark-results.json \
          --junit-xml=test-results/performance-tests.xml
          
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          test-results/
          benchmark-results.json

  # Docker Tests
  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        
    - name: Build Docker image
      run: |
        docker build -t memorylink:test .
        
    - name: Run Docker tests
      run: |
        pytest tests/docker/ \
          --marker=docker \
          --junit-xml=test-results/docker-tests.xml
          
    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-test-results
        path: test-results/

  # Coverage Report Generation
  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install coverage tools
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml] pytest-cov
        
    - name: Combine coverage reports
      run: |
        coverage combine */coverage.xml || true
        coverage report --format=markdown > coverage-summary.md
        coverage html -d coverage-html/
        
    - name: Upload combined coverage
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage-report
        path: |
          coverage-summary.md
          coverage-html/
          
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: coverage-summary.md

  # Test Result Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, performance-tests, docker-tests]
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "# MemoryLink Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results Overview" >> test-summary.md
        echo "" >> test-summary.md
        
        # Count test files
        find . -name "*.xml" -type f | wc -l > test-count.txt
        echo "Total test result files: $(cat test-count.txt)" >> test-summary.md
        
        # Check for any failures
        if find . -name "*.xml" -exec grep -l 'failures="[1-9]' {} \;; then
          echo "❌ Some tests failed" >> test-summary.md
        else
          echo "✅ All tests passed" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "Generated on: $(date)" >> test-summary.md
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md