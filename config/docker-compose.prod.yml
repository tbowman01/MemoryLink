# ðŸš€ MemoryLink Production Docker Compose Configuration
# Optimized for production deployment with security, performance, and reliability

version: '3.8'

services:
  # MemoryLink API Server
  memorylink:
    build:
      context: ..
      dockerfile: Dockerfile.prod
      args:
        - BUILD_DATE=${BUILD_DATE:-now}
        - VCS_REF=${VCS_REF:-unknown}
    image: memorylink:latest
    container_name: memorylink_api
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "${API_PORT:-8000}:8000"
    
    # Environment variables
    environment:
      # Database connection
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      
      # API configuration  
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=${API_WORKERS:-4}
      
      # OpenAI configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-text-embedding-ada-002}
      
      # Security
      - CORS_ORIGINS=${CORS_ORIGINS:-["*"]}
      - API_KEY_REQUIRED=${API_KEY_REQUIRED:-false}
      - API_KEYS=${API_KEYS:-""}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Performance
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-102400}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-10}
      - SEARCH_TIMEOUT=${SEARCH_TIMEOUT:-30}
      
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      db:
        condition: service_healthy
    
    # Volumes
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Network
    networks:
      - memorylink_network

  # PostgreSQL Database with pgvector
  db:
    image: ankane/pgvector:v0.5.1
    container_name: memorylink_db
    restart: unless-stopped
    
    # Environment variables
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-memorylink}
      - POSTGRES_USER=${POSTGRES_USER:-memorylink}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=peer
      
      # Performance tuning
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=vector
      - POSTGRES_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-100}
      - POSTGRES_SHARED_BUFFERS=${DB_SHARED_BUFFERS:-256MB}
      - POSTGRES_EFFECTIVE_CACHE_SIZE=${DB_EFFECTIVE_CACHE_SIZE:-1GB}
      - POSTGRES_WORK_MEM=${DB_WORK_MEM:-4MB}
      - POSTGRES_MAINTENANCE_WORK_MEM=${DB_MAINTENANCE_WORK_MEM:-64MB}
    
    # Port configuration (internal only by default)
    ports:
      - "${POSTGRES_PORT:-127.0.0.1:5432}:5432"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-memorylink} -d ${POSTGRES_DB:-memorylink}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Network
    networks:
      - memorylink_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: memorylink_nginx
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    # Volumes
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      - memorylink
    
    # Network
    networks:
      - memorylink_network
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Redis for Caching (Optional)
  redis:
    image: redis:alpine
    container_name: memorylink_redis
    restart: unless-stopped
    
    # Command with persistence and security
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-memorylink_redis_pass}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    
    # Port configuration (internal only)
    expose:
      - "6379"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    
    # Volumes
    volumes:
      - redis_data:/data
    
    # Network
    networks:
      - memorylink_network
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: memorylink_prometheus
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    # Network
    networks:
      - memorylink_network
    
    # Dependencies
    depends_on:
      - memorylink

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: memorylink_grafana
    restart: unless-stopped
    
    # Port configuration
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Network
    networks:
      - memorylink_network
    
    # Dependencies
    depends_on:
      - prometheus

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./backups}/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_PATH:-./logs}/app
  
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/app
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_PATH:-./logs}/nginx
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana

# Custom network
networks:
  memorylink_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16